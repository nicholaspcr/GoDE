// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/pareto_set.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ParetoService_Get_FullMethodName        = "/api.v1.ParetoService/Get"
	ParetoService_Delete_FullMethodName     = "/api.v1.ParetoService/Delete"
	ParetoService_ListByUser_FullMethodName = "/api.v1.ParetoService/ListByUser"
)

// ParetoServiceClient is the client API for ParetoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParetoServiceClient interface {
	Get(ctx context.Context, in *ParetoServiceGetRequest, opts ...grpc.CallOption) (*ParetoServiceGetResponse, error)
	Delete(ctx context.Context, in *ParetoServiceDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListByUser(ctx context.Context, in *ParetoServiceListByUserRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ParetoServiceListByUserResponse], error)
}

type paretoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParetoServiceClient(cc grpc.ClientConnInterface) ParetoServiceClient {
	return &paretoServiceClient{cc}
}

func (c *paretoServiceClient) Get(ctx context.Context, in *ParetoServiceGetRequest, opts ...grpc.CallOption) (*ParetoServiceGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParetoServiceGetResponse)
	err := c.cc.Invoke(ctx, ParetoService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paretoServiceClient) Delete(ctx context.Context, in *ParetoServiceDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ParetoService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paretoServiceClient) ListByUser(ctx context.Context, in *ParetoServiceListByUserRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ParetoServiceListByUserResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ParetoService_ServiceDesc.Streams[0], ParetoService_ListByUser_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ParetoServiceListByUserRequest, ParetoServiceListByUserResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ParetoService_ListByUserClient = grpc.ServerStreamingClient[ParetoServiceListByUserResponse]

// ParetoServiceServer is the server API for ParetoService service.
// All implementations must embed UnimplementedParetoServiceServer
// for forward compatibility.
type ParetoServiceServer interface {
	Get(context.Context, *ParetoServiceGetRequest) (*ParetoServiceGetResponse, error)
	Delete(context.Context, *ParetoServiceDeleteRequest) (*emptypb.Empty, error)
	ListByUser(*ParetoServiceListByUserRequest, grpc.ServerStreamingServer[ParetoServiceListByUserResponse]) error
	mustEmbedUnimplementedParetoServiceServer()
}

// UnimplementedParetoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParetoServiceServer struct{}

func (UnimplementedParetoServiceServer) Get(context.Context, *ParetoServiceGetRequest) (*ParetoServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedParetoServiceServer) Delete(context.Context, *ParetoServiceDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedParetoServiceServer) ListByUser(*ParetoServiceListByUserRequest, grpc.ServerStreamingServer[ParetoServiceListByUserResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListByUser not implemented")
}
func (UnimplementedParetoServiceServer) mustEmbedUnimplementedParetoServiceServer() {}
func (UnimplementedParetoServiceServer) testEmbeddedByValue()                       {}

// UnsafeParetoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParetoServiceServer will
// result in compilation errors.
type UnsafeParetoServiceServer interface {
	mustEmbedUnimplementedParetoServiceServer()
}

func RegisterParetoServiceServer(s grpc.ServiceRegistrar, srv ParetoServiceServer) {
	// If the following call pancis, it indicates UnimplementedParetoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ParetoService_ServiceDesc, srv)
}

func _ParetoService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParetoServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParetoServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParetoService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParetoServiceServer).Get(ctx, req.(*ParetoServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParetoService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParetoServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParetoServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParetoService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParetoServiceServer).Delete(ctx, req.(*ParetoServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParetoService_ListByUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ParetoServiceListByUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ParetoServiceServer).ListByUser(m, &grpc.GenericServerStream[ParetoServiceListByUserRequest, ParetoServiceListByUserResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ParetoService_ListByUserServer = grpc.ServerStreamingServer[ParetoServiceListByUserResponse]

// ParetoService_ServiceDesc is the grpc.ServiceDesc for ParetoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParetoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ParetoService",
	HandlerType: (*ParetoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ParetoService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ParetoService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListByUser",
			Handler:       _ParetoService_ListByUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/pareto_set.proto",
}
