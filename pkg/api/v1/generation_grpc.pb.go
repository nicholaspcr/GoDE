// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/generation.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GenerationService_Create_FullMethodName = "/api.v1.GenerationService/Create"
	GenerationService_Get_FullMethodName    = "/api.v1.GenerationService/Get"
	GenerationService_Update_FullMethodName = "/api.v1.GenerationService/Update"
	GenerationService_Delete_FullMethodName = "/api.v1.GenerationService/Delete"
)

// GenerationServiceClient is the client API for GenerationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenerationServiceClient interface {
	Create(ctx context.Context, in *GenerationServiceCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *GenerationServiceGetRequest, opts ...grpc.CallOption) (*GenerationServiceGetResponse, error)
	Update(ctx context.Context, in *GenerationServiceUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *GenerationServiceDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type generationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenerationServiceClient(cc grpc.ClientConnInterface) GenerationServiceClient {
	return &generationServiceClient{cc}
}

func (c *generationServiceClient) Create(ctx context.Context, in *GenerationServiceCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GenerationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generationServiceClient) Get(ctx context.Context, in *GenerationServiceGetRequest, opts ...grpc.CallOption) (*GenerationServiceGetResponse, error) {
	out := new(GenerationServiceGetResponse)
	err := c.cc.Invoke(ctx, GenerationService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generationServiceClient) Update(ctx context.Context, in *GenerationServiceUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GenerationService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generationServiceClient) Delete(ctx context.Context, in *GenerationServiceDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GenerationService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenerationServiceServer is the server API for GenerationService service.
// All implementations must embed UnimplementedGenerationServiceServer
// for forward compatibility
type GenerationServiceServer interface {
	Create(context.Context, *GenerationServiceCreateRequest) (*emptypb.Empty, error)
	Get(context.Context, *GenerationServiceGetRequest) (*GenerationServiceGetResponse, error)
	Update(context.Context, *GenerationServiceUpdateRequest) (*emptypb.Empty, error)
	Delete(context.Context, *GenerationServiceDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGenerationServiceServer()
}

// UnimplementedGenerationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGenerationServiceServer struct {
}

func (UnimplementedGenerationServiceServer) Create(context.Context, *GenerationServiceCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGenerationServiceServer) Get(context.Context, *GenerationServiceGetRequest) (*GenerationServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGenerationServiceServer) Update(context.Context, *GenerationServiceUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGenerationServiceServer) Delete(context.Context, *GenerationServiceDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGenerationServiceServer) mustEmbedUnimplementedGenerationServiceServer() {}

// UnsafeGenerationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenerationServiceServer will
// result in compilation errors.
type UnsafeGenerationServiceServer interface {
	mustEmbedUnimplementedGenerationServiceServer()
}

func RegisterGenerationServiceServer(s grpc.ServiceRegistrar, srv GenerationServiceServer) {
	s.RegisterService(&GenerationService_ServiceDesc, srv)
}

func _GenerationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerationServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerationServiceServer).Create(ctx, req.(*GenerationServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerationServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerationService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerationServiceServer).Get(ctx, req.(*GenerationServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerationServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerationServiceServer).Update(ctx, req.(*GenerationServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerationServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerationServiceServer).Delete(ctx, req.(*GenerationServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenerationService_ServiceDesc is the grpc.ServiceDesc for GenerationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenerationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.GenerationService",
	HandlerType: (*GenerationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GenerationService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GenerationService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GenerationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GenerationService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/generation.proto",
}
