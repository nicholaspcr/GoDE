// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/execution.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExecutionServices_Create_FullMethodName = "/api.ExecutionServices/Create"
	ExecutionServices_Read_FullMethodName   = "/api.ExecutionServices/Read"
	ExecutionServices_Update_FullMethodName = "/api.ExecutionServices/Update"
	ExecutionServices_Delete_FullMethodName = "/api.ExecutionServices/Delete"
)

// ExecutionServicesClient is the client API for ExecutionServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutionServicesClient interface {
	Create(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Read(ctx context.Context, in *ExecutionIDs, opts ...grpc.CallOption) (*Execution, error)
	Update(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *ExecutionIDs, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type executionServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutionServicesClient(cc grpc.ClientConnInterface) ExecutionServicesClient {
	return &executionServicesClient{cc}
}

func (c *executionServicesClient) Create(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExecutionServices_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionServicesClient) Read(ctx context.Context, in *ExecutionIDs, opts ...grpc.CallOption) (*Execution, error) {
	out := new(Execution)
	err := c.cc.Invoke(ctx, ExecutionServices_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionServicesClient) Update(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExecutionServices_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionServicesClient) Delete(ctx context.Context, in *ExecutionIDs, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExecutionServices_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutionServicesServer is the server API for ExecutionServices service.
// All implementations must embed UnimplementedExecutionServicesServer
// for forward compatibility
type ExecutionServicesServer interface {
	Create(context.Context, *Execution) (*emptypb.Empty, error)
	Read(context.Context, *ExecutionIDs) (*Execution, error)
	Update(context.Context, *Execution) (*emptypb.Empty, error)
	Delete(context.Context, *ExecutionIDs) (*emptypb.Empty, error)
	mustEmbedUnimplementedExecutionServicesServer()
}

// UnimplementedExecutionServicesServer must be embedded to have forward compatible implementations.
type UnimplementedExecutionServicesServer struct {
}

func (UnimplementedExecutionServicesServer) Create(context.Context, *Execution) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedExecutionServicesServer) Read(context.Context, *ExecutionIDs) (*Execution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedExecutionServicesServer) Update(context.Context, *Execution) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedExecutionServicesServer) Delete(context.Context, *ExecutionIDs) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedExecutionServicesServer) mustEmbedUnimplementedExecutionServicesServer() {}

// UnsafeExecutionServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutionServicesServer will
// result in compilation errors.
type UnsafeExecutionServicesServer interface {
	mustEmbedUnimplementedExecutionServicesServer()
}

func RegisterExecutionServicesServer(s grpc.ServiceRegistrar, srv ExecutionServicesServer) {
	s.RegisterService(&ExecutionServices_ServiceDesc, srv)
}

func _ExecutionServices_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Execution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionServicesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionServices_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionServicesServer).Create(ctx, req.(*Execution))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionServices_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionServicesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionServices_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionServicesServer).Read(ctx, req.(*ExecutionIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionServices_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Execution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionServicesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionServices_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionServicesServer).Update(ctx, req.(*Execution))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionServices_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionServicesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionServices_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionServicesServer).Delete(ctx, req.(*ExecutionIDs))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutionServices_ServiceDesc is the grpc.ServiceDesc for ExecutionServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutionServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ExecutionServices",
	HandlerType: (*ExecutionServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ExecutionServices_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ExecutionServices_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ExecutionServices_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ExecutionServices_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/execution.proto",
}

const (
	ExecutionSetServices_Create_FullMethodName      = "/api.ExecutionSetServices/Create"
	ExecutionSetServices_Find_FullMethodName        = "/api.ExecutionSetServices/Find"
	ExecutionSetServices_Delete_FullMethodName      = "/api.ExecutionSetServices/Delete"
	ExecutionSetServices_List_FullMethodName        = "/api.ExecutionSetServices/List"
	ExecutionSetServices_FetchByUser_FullMethodName = "/api.ExecutionSetServices/FetchByUser"
)

// ExecutionSetServicesClient is the client API for ExecutionSetServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutionSetServicesClient interface {
	Create(ctx context.Context, in *ExecutionSet, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Find(ctx context.Context, in *ExecutionSetIDs, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *ExecutionSetIDs, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ExecutionSetIDs, opts ...grpc.CallOption) (ExecutionSetServices_ListClient, error)
	FetchByUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (ExecutionSetServices_FetchByUserClient, error)
}

type executionSetServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutionSetServicesClient(cc grpc.ClientConnInterface) ExecutionSetServicesClient {
	return &executionSetServicesClient{cc}
}

func (c *executionSetServicesClient) Create(ctx context.Context, in *ExecutionSet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExecutionSetServices_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionSetServicesClient) Find(ctx context.Context, in *ExecutionSetIDs, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExecutionSetServices_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionSetServicesClient) Delete(ctx context.Context, in *ExecutionSetIDs, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExecutionSetServices_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionSetServicesClient) List(ctx context.Context, in *ExecutionSetIDs, opts ...grpc.CallOption) (ExecutionSetServices_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecutionSetServices_ServiceDesc.Streams[0], ExecutionSetServices_List_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &executionSetServicesListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecutionSetServices_ListClient interface {
	Recv() (*Execution, error)
	grpc.ClientStream
}

type executionSetServicesListClient struct {
	grpc.ClientStream
}

func (x *executionSetServicesListClient) Recv() (*Execution, error) {
	m := new(Execution)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executionSetServicesClient) FetchByUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (ExecutionSetServices_FetchByUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecutionSetServices_ServiceDesc.Streams[1], ExecutionSetServices_FetchByUser_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &executionSetServicesFetchByUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecutionSetServices_FetchByUserClient interface {
	Recv() (*Execution, error)
	grpc.ClientStream
}

type executionSetServicesFetchByUserClient struct {
	grpc.ClientStream
}

func (x *executionSetServicesFetchByUserClient) Recv() (*Execution, error) {
	m := new(Execution)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExecutionSetServicesServer is the server API for ExecutionSetServices service.
// All implementations must embed UnimplementedExecutionSetServicesServer
// for forward compatibility
type ExecutionSetServicesServer interface {
	Create(context.Context, *ExecutionSet) (*emptypb.Empty, error)
	Find(context.Context, *ExecutionSetIDs) (*emptypb.Empty, error)
	Delete(context.Context, *ExecutionSetIDs) (*emptypb.Empty, error)
	List(*ExecutionSetIDs, ExecutionSetServices_ListServer) error
	FetchByUser(*UserID, ExecutionSetServices_FetchByUserServer) error
	mustEmbedUnimplementedExecutionSetServicesServer()
}

// UnimplementedExecutionSetServicesServer must be embedded to have forward compatible implementations.
type UnimplementedExecutionSetServicesServer struct {
}

func (UnimplementedExecutionSetServicesServer) Create(context.Context, *ExecutionSet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedExecutionSetServicesServer) Find(context.Context, *ExecutionSetIDs) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedExecutionSetServicesServer) Delete(context.Context, *ExecutionSetIDs) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedExecutionSetServicesServer) List(*ExecutionSetIDs, ExecutionSetServices_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedExecutionSetServicesServer) FetchByUser(*UserID, ExecutionSetServices_FetchByUserServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchByUser not implemented")
}
func (UnimplementedExecutionSetServicesServer) mustEmbedUnimplementedExecutionSetServicesServer() {}

// UnsafeExecutionSetServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutionSetServicesServer will
// result in compilation errors.
type UnsafeExecutionSetServicesServer interface {
	mustEmbedUnimplementedExecutionSetServicesServer()
}

func RegisterExecutionSetServicesServer(s grpc.ServiceRegistrar, srv ExecutionSetServicesServer) {
	s.RegisterService(&ExecutionSetServices_ServiceDesc, srv)
}

func _ExecutionSetServices_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionSetServicesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionSetServices_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionSetServicesServer).Create(ctx, req.(*ExecutionSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionSetServices_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionSetIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionSetServicesServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionSetServices_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionSetServicesServer).Find(ctx, req.(*ExecutionSetIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionSetServices_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionSetIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionSetServicesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionSetServices_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionSetServicesServer).Delete(ctx, req.(*ExecutionSetIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionSetServices_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutionSetIDs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecutionSetServicesServer).List(m, &executionSetServicesListServer{stream})
}

type ExecutionSetServices_ListServer interface {
	Send(*Execution) error
	grpc.ServerStream
}

type executionSetServicesListServer struct {
	grpc.ServerStream
}

func (x *executionSetServicesListServer) Send(m *Execution) error {
	return x.ServerStream.SendMsg(m)
}

func _ExecutionSetServices_FetchByUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecutionSetServicesServer).FetchByUser(m, &executionSetServicesFetchByUserServer{stream})
}

type ExecutionSetServices_FetchByUserServer interface {
	Send(*Execution) error
	grpc.ServerStream
}

type executionSetServicesFetchByUserServer struct {
	grpc.ServerStream
}

func (x *executionSetServicesFetchByUserServer) Send(m *Execution) error {
	return x.ServerStream.SendMsg(m)
}

// ExecutionSetServices_ServiceDesc is the grpc.ServiceDesc for ExecutionSetServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutionSetServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ExecutionSetServices",
	HandlerType: (*ExecutionSetServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ExecutionSetServices_Create_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _ExecutionSetServices_Find_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ExecutionSetServices_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ExecutionSetServices_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchByUser",
			Handler:       _ExecutionSetServices_FetchByUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/execution.proto",
}
