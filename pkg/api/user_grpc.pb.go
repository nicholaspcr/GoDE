// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/user.proto

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserBaseServices_Create_FullMethodName = "/api.UserBaseServices/Create"
	UserBaseServices_Read_FullMethodName   = "/api.UserBaseServices/Read"
	UserBaseServices_Update_FullMethodName = "/api.UserBaseServices/Update"
	UserBaseServices_Delete_FullMethodName = "/api.UserBaseServices/Delete"
)

// UserBaseServicesClient is the client API for UserBaseServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserBaseServicesClient interface {
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Read(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error)
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userBaseServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewUserBaseServicesClient(cc grpc.ClientConnInterface) UserBaseServicesClient {
	return &userBaseServicesClient{cc}
}

func (c *userBaseServicesClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserBaseServices_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBaseServicesClient) Read(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UserBaseServices_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBaseServicesClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserBaseServices_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBaseServicesClient) Delete(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserBaseServices_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserBaseServicesServer is the server API for UserBaseServices service.
// All implementations must embed UnimplementedUserBaseServicesServer
// for forward compatibility
type UserBaseServicesServer interface {
	Create(context.Context, *User) (*emptypb.Empty, error)
	Read(context.Context, *UserID) (*User, error)
	Update(context.Context, *User) (*emptypb.Empty, error)
	Delete(context.Context, *UserID) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserBaseServicesServer()
}

// UnimplementedUserBaseServicesServer must be embedded to have forward compatible implementations.
type UnimplementedUserBaseServicesServer struct{}

func (UnimplementedUserBaseServicesServer) Create(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}

func (UnimplementedUserBaseServicesServer) Read(context.Context, *UserID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}

func (UnimplementedUserBaseServicesServer) Update(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func (UnimplementedUserBaseServicesServer) Delete(context.Context, *UserID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserBaseServicesServer) mustEmbedUnimplementedUserBaseServicesServer() {}

// UnsafeUserBaseServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserBaseServicesServer will
// result in compilation errors.
type UnsafeUserBaseServicesServer interface {
	mustEmbedUnimplementedUserBaseServicesServer()
}

func RegisterUserBaseServicesServer(s grpc.ServiceRegistrar, srv UserBaseServicesServer) {
	s.RegisterService(&UserBaseServices_ServiceDesc, srv)
}

func _UserBaseServices_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBaseServicesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBaseServices_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBaseServicesServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBaseServices_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBaseServicesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBaseServices_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBaseServicesServer).Read(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBaseServices_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBaseServicesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBaseServices_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBaseServicesServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBaseServices_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBaseServicesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBaseServices_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBaseServicesServer).Delete(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// UserBaseServices_ServiceDesc is the grpc.ServiceDesc for UserBaseServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserBaseServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserBaseServices",
	HandlerType: (*UserBaseServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserBaseServices_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _UserBaseServices_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserBaseServices_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserBaseServices_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user.proto",
}
