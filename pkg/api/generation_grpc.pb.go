// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/generation.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GenerationServices_Create_FullMethodName = "/api.GenerationServices/Create"
	GenerationServices_Read_FullMethodName   = "/api.GenerationServices/Read"
	GenerationServices_Update_FullMethodName = "/api.GenerationServices/Update"
	GenerationServices_Delete_FullMethodName = "/api.GenerationServices/Delete"
)

// GenerationServicesClient is the client API for GenerationServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenerationServicesClient interface {
	Create(ctx context.Context, in *Generation, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Read(ctx context.Context, in *GenerationID, opts ...grpc.CallOption) (*Generation, error)
	Update(ctx context.Context, in *Generation, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *GenerationID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type generationServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewGenerationServicesClient(cc grpc.ClientConnInterface) GenerationServicesClient {
	return &generationServicesClient{cc}
}

func (c *generationServicesClient) Create(ctx context.Context, in *Generation, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GenerationServices_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generationServicesClient) Read(ctx context.Context, in *GenerationID, opts ...grpc.CallOption) (*Generation, error) {
	out := new(Generation)
	err := c.cc.Invoke(ctx, GenerationServices_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generationServicesClient) Update(ctx context.Context, in *Generation, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GenerationServices_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generationServicesClient) Delete(ctx context.Context, in *GenerationID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GenerationServices_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenerationServicesServer is the server API for GenerationServices service.
// All implementations must embed UnimplementedGenerationServicesServer
// for forward compatibility
type GenerationServicesServer interface {
	Create(context.Context, *Generation) (*emptypb.Empty, error)
	Read(context.Context, *GenerationID) (*Generation, error)
	Update(context.Context, *Generation) (*emptypb.Empty, error)
	Delete(context.Context, *GenerationID) (*emptypb.Empty, error)
	mustEmbedUnimplementedGenerationServicesServer()
}

// UnimplementedGenerationServicesServer must be embedded to have forward compatible implementations.
type UnimplementedGenerationServicesServer struct {
}

func (UnimplementedGenerationServicesServer) Create(context.Context, *Generation) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGenerationServicesServer) Read(context.Context, *GenerationID) (*Generation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedGenerationServicesServer) Update(context.Context, *Generation) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGenerationServicesServer) Delete(context.Context, *GenerationID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGenerationServicesServer) mustEmbedUnimplementedGenerationServicesServer() {}

// UnsafeGenerationServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenerationServicesServer will
// result in compilation errors.
type UnsafeGenerationServicesServer interface {
	mustEmbedUnimplementedGenerationServicesServer()
}

func RegisterGenerationServicesServer(s grpc.ServiceRegistrar, srv GenerationServicesServer) {
	s.RegisterService(&GenerationServices_ServiceDesc, srv)
}

func _GenerationServices_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Generation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerationServicesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerationServices_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerationServicesServer).Create(ctx, req.(*Generation))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerationServices_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerationServicesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerationServices_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerationServicesServer).Read(ctx, req.(*GenerationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerationServices_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Generation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerationServicesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerationServices_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerationServicesServer).Update(ctx, req.(*Generation))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerationServices_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerationServicesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenerationServices_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerationServicesServer).Delete(ctx, req.(*GenerationID))
	}
	return interceptor(ctx, in, info, handler)
}

// GenerationServices_ServiceDesc is the grpc.ServiceDesc for GenerationServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenerationServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.GenerationServices",
	HandlerType: (*GenerationServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GenerationServices_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _GenerationServices_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GenerationServices_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GenerationServices_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/generation.proto",
}
